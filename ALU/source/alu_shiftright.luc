module alu_shiftright ( // SHIFTS A BY UP TO 15 BITS TO THE RIGHT
    input a[16],
    input b[4],
    input alufn1,    // selector, alufn1=0 selects SR, alufn1=1 selects SRA
    output q[16]  // output shift
  ) {
  alu_shiftright_mux arithmeticmux;
  sig w[16];
  sig x[16];
  sig y[16];
  sig p; // padding either 0 or a15
  always {
    arithmeticmux.a = a[15];
    arithmeticmux.alufn1 = alufn1;
    p = arithmeticmux.out;
    case(b[3]){ // shifts 8 bits
      b0:
          w = a;
      b1:
          w[7:0] = a[15:8];
          w[15:8] = c{p,p,p,p,p,p,p,p}; // this means 4 bits of 0, equibalent to b0000
      default:
          w = a;                
    }
    case(b[2]){ // shifts 4 bits
    b0:
        x = w;
    b1:
        x[11:0] = w[15:4];
        x[15:12] = c{p,p,p,p};
    default:
        x = w;
    }
    case(b[1]){ // shifts 2 bits
    b0:
        y = x;
    b1:
        y[13:0] = x[15:2];
        y[15:14] = c{p,p};
    default:
        y = x;
    } 
    case(b[0]){ // shifts 1 bit
    b0:
        q = y;
    b1:
        q[14:0] = y[15:1];
        q[15] = p;
    default:
        q = y;
    }
  }
}