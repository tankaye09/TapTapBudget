module main_fsm (
    input clk,  // clock
    input rst,  // reset
    input start, // start button
    input rd2[16],  // rd2
    input cycleCounter[16], // number of cycles of the game, each cycle resembles one frame change in the game
    input hold,     // clk hold of the slow clock
    
    input clkHold,    
    
    output asel[2],
    output bsel[3],
    output alufn[6],
    output stu,
    output we,
    output ra[4],
    output rb[4],
    output rc[4]
    
  ) {
  .clk(clk) {
    .rst(rst) {
      fsm state = {INITLIFE, INCREASECOUNT, SHIFTBLOCK1, SHIFTBLOCK2, SHIFTBLOCK3, SHIFTBLOCK4, RANDCOL, CHECKCOL, BRANCHCOL, RANDCOLOUR, ADDCOLOR1, ADDCOLOR2, ADDBLOCK, STORECOL1, STORECOL2, STORECOL3, STORECOL4, CHECKEMPTYROW, BRANCHEMPTYROW, CHECKPLAYERPOS, BRANCHSCORE, CHECKCOMBO, ADDCOMBO, MULCOMBO, ADDSCORE, RESETCOMBO, MINUSHEALTH, CHECKHEALTH, BRANCHHEALTH, COUNTERMOD, CHECKMOD, BRANCHMOD, INCREASECLK, CLKHOLD, END, IDLE}; // default will be IDLE
      //counter slowClock(#SIZE(1),#DIV(26));
      counter slowClock(#SIZE(1),#DIV(26));
      counter slowClock1(#SIZE(1),#DIV(25));
      counter slowClock2(#SIZE(1),#DIV(24));
      counter slowClock3(#SIZE(1),#DIV(23));
      counter slowClock4(#SIZE(1),#DIV(22));
    }
    edge_detector slowClockEdge(#RISE(1), #FALL(0));
    edge_detector slowClockEdge1(#RISE(1), #FALL(0));
    edge_detector slowClockEdge2(#RISE(1), #FALL(0));
    edge_detector slowClockEdge3(#RISE(1), #FALL(0));
    edge_detector slowClockEdge4(#RISE(1), #FALL(0));
  }  
  
  always {
  
    slowClockEdge.in = slowClock.value;
    slowClockEdge1.in = slowClock1.value;
    slowClockEdge2.in = slowClock2.value;
    slowClockEdge3.in = slowClock3.value;
    slowClockEdge4.in = slowClock4.value;
    
    asel = 2b0;
    bsel = 3b0;
    stu = 0;
    we = 0;
    ra = 4b0;
    rb = 4b0;
    rc = 4b0;
    alufn = 6b0;
    
    case(state.q) {
    
      state.IDLE:
        if (start) {
          state.d = state.INITLIFE; 
        }
        
      // Initialise with 3 lives, as register default value is 0
      state.INITLIFE:
        alufn = 6b000000; //ADD
        ra = 4b110;
        rc = 4b0110;
        asel = 2b00;
        bsel = 3b011;
        if (slowClockEdge.out == b1){
          if (clkHold == 0) {
          state.d = state.INCREASECOUNT;
          }
        }
      
      // State to start the game and add 1 to the counter
      state.INCREASECOUNT:
        alufn = 6b000000; //ADD
        ra = 4b0111;
        rc = 4b0111;
        asel = 2b00;
        bsel = 3b001;
        if (slowClockEdge.out == b1){ //only add when MSB of slowCLock == 1
          if (clkHold == 0) {
          state.d = state.SHIFTBLOCK1;
          }
        }
      
      // Shift the first column by 2 bits
      state.SHIFTBLOCK1:
        alufn = 6b100000; //SHL
        ra = 4b0;
        rc = 4b0;
        asel = 2b00;
        bsel = 3b010;
        //state.d = state.SHIFTBLOCK2;
        if (slowClockEdge.out == b1){ //only add when MSB of slowCLock == 1
          if (clkHold == 0) {
          state.d = state.SHIFTBLOCK2;
          }
        }
      
      // Shift the second column by 2 bits
      state.SHIFTBLOCK2:
        alufn = 6b100000; //SHL
        ra = 4b0001;
        rc = 4b0001;
        asel = 2b00;
        bsel = 3b010;
        if (slowClockEdge.out == b1){ //only add when MSB of slowCLock == 1
          if (clkHold == 0) {
          state.d = state.SHIFTBLOCK3;
          }
        }    
      // Shift the third column by 2 bits
      state.SHIFTBLOCK3:
        alufn = 6b100000; //SHL
        ra = 4b0001;
        rc = 4b0001;
        asel = 2b00;
        bsel = 3b010;
        we = b1;
        if (slowClockEdge.out == b1){ //only add when MSB of slowCLock == 1
                if (clkHold == 0) {
              state.d = state.SHIFTBLOCK4;
          }
        }
      // Shift the fourth column by 2 bits
      state.SHIFTBLOCK4:
        alufn = 6b100000; //SHL
        ra = 4b0001;
        rc = 4b0001;
        asel = 2b00;
        bsel = 3b010;
        we = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.RANDCOL;
            }
          }

      state.RANDCOL:
        alufn = 6b011100; //B
        rc = 4b1001;
        asel = 2b11;
        we = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.CHECKCOL;
            }
          }

      state.CHECKCOL:
        alufn = 6b110111; //CMPLE
        ra = 4b1001;
        rc = 4b1011;
        asel = 2b00;
        bsel = 3b011;
        we = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.BRANCHCOL;
            }
          }

      state.BRANCHCOL:
        rb = 4b1011;
        we = 0;
        
        if (rd2 == 16b1) {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.RANDCOLOUR;
                }
              }
        } else {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.STORECOL1;
                }
              }
        }

      // Get randgen output from B
      state.RANDCOLOUR:
        alufn = 6b011100; //B
        bsel = 3b110;
        rc = 4b1010;
        we = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.ADDCOLOR1;
            }
          }

      state.ADDCOLOR1:
        alufn = 6b011100; //'B'
        bsel = 3b000;
        rb = h09;
        rc = h0B;
        we = b1;
        
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.ADDCOLOR2;
            }
          }
        
        state.ADDCOLOR2:
        alufn = 6b000000; //ADD
        asel = 0;
        bsel = 3b000;
        ra = h0A;
        rb = h0B;
        rc = h0C;
        we = b1;
        
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.ADDBLOCK;
            }
          }

      // Fix
      state.ADDBLOCK:
        alufn = 6b011100; //'B'
        bsel = 3b000;
        rb = h0C;
        if (rd2 == b0) {
          rc = b0;
        }
        else if (rd2 == b1) {
          rc = b01;
        }
        else if (rd2 == b10) {
          rc = b10;
        }
        else if (rd2 == b11) {
          rc = b11;
        }
        we = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.BRANCHCOL;
            }
          }

      // Store the [6:7] of row 1 as the [6:7] of the temp reg
      state.STORECOL1:
        alufn = 6b111000; // SHAD12
        asel = 2b00;
        bsel = 3b100;  // select all 0s as the input
        ra = 4b0000;  // select the address of col 0
        rc = 4b1000;  // store in Reg 8 which is the LastRow storage reg
        if (slowClockEdge.out) {
          if (clkHold == 0) {
          state.d = state.STORECOL2;
          }
        }

      state.STORECOL2:
        alufn = 6b111001; // SHAD10
        asel = 2b00;
        bsel = 3b000;
        ra = 4b0001;  // select the address of col 1
        rb = 4b1000;  // select the contents of the LastRow reg
        rc = 4b1000;  // store in Reg 8 which is the LastRow storage reg
        if (slowClockEdge.out) {
          if (clkHold == 0) {
          state.d = state.STORECOL3;
          }
        }

      state.STORECOL3:
        alufn = 6b111010; // SHAD8
        asel = 2b00;
        bsel = 3b000;
        ra = 4b0010;  // select the address of col 2
        rb = 4b1000;  // select the contents of the LastRow reg
        rc = 4b1000;  // store in Reg 8 which is the LastRow storage reg
        if (slowClockEdge.out) {
          if (clkHold == 0) {
          state.d = state.STORECOL4;
          }
        }

      state.STORECOL4:
        alufn = 6b111011; // SHAD6
        asel = 2b00;
        bsel = 3b000;
        ra = 4b0011;  // select the address of col 3
        rb = 4b1000;  // select the contents of the LastRow reg
        rc = 4b1000;  // store in Reg 8 which is the LastRow storage reg
        if (slowClockEdge.out) {
          if (clkHold == 0) {
          state.d = state.CHECKEMPTYROW;
          }
        }

      state.CHECKEMPTYROW:
        alufn = 6b110011; //COMPEQ
        ra = 4b1101;
        rc = 4b0111;
        asel = 2b10;
        bsel = 3b101;
        we = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.BRANCHEMPTYROW;
            }
          }

      state.BRANCHEMPTYROW:
        rb = 4b0111;
        we = 0;
        if (rd2 == 16b1) {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.COUNTERMOD;
                }
              }
        } else {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.CHECKPLAYERPOS;
                }
              }
        }

      state.CHECKPLAYERPOS:
        alufn = 6b110011; //COMPEQ
        ra = 4b1000;
        rc = 4b1100;
        asel = 2b00;
        bsel = 3b101;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.BRANCHSCORE;
            }
          }

      state.BRANCHSCORE:
        rb = 4b1100;
        we = 0;
        if (rd2 == 16b1) {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.CHECKCOMBO;
                }
              }
        } else {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.RESETCOMBO;
                }
              }
        }

      state.CHECKCOMBO:
        alufn = 6b110011; //COMPEQ
        ra = 4b0100;
        rc = 4b1100;
        asel = 2b00;
        bsel = 3b011;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.ADDCOMBO;
            }
          }

      state.ADDCOMBO:
        alufn = 6b000000; //ADD
        ra = 4b0100;
        rc = 4b0100;
        asel = 2b00;
        bsel = 3b001;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.MULCOMBO;
            }
          }

      state.MULCOMBO:
        alufn = 6b100000; //SHL
        ra = 4b0100;
        rc = 4b1101;
        asel = 2b00;
        bsel = 3b001;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.ADDSCORE;
            }
          }

      state.ADDSCORE:
        alufn = 6b100000; //ADD
        ra = 4b0101;
        rc = 4b0101;
        asel = 2b00;
        bsel = 3b000;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.RESETCOMBO;
            }
          }

      state.RESETCOMBO:
        alufn = 6b100000; //ADD
        ra = 4b0000;
        rc = 4b0100;
        asel = 2b10;
        bsel = 3b100;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.MINUSHEALTH;
            }
          }

      state.MINUSHEALTH:
        alufn = 6b000001; //SUB
        ra = 4b0110;
        rc = 4b0110;
        asel = 2b00;
        bsel = 3b001;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.CHECKHEALTH;
            }
          }

      // Check if player health is 0 and reuturn 1 if it is
      state.CHECKHEALTH:
        alufn = 6b110111; //CMPLE
        ra = 4b0110;
        rc = 4b1101;
        asel = 2b00;
        bsel = 3b100;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.BRANCHHEALTH;
            }
          }

      state.BRANCHHEALTH:
        rb = 4b1101;
        we = 0;
        if (rd2 == 16b1) {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.END;
                }
              }
        } else {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.COUNTERMOD;
                }
              }
        }

      // Check if the counter is a multiple of 10
      state.COUNTERMOD:
        alufn = 6b111111; //MOD
        ra = 4b0111;
        rc = 4b1110;
        asel = 2b00;
        bsel = 3b111;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.CHECKMOD;
            }
          }

      // Check if the temp reg from mod 10 is equals to 0
      state.CHECKMOD:
        alufn = 6b110011; //CMPEQ
        ra = 4b1110;
        rc = 4b1110;
        asel = 2b00;
        bsel = 3b100;
        we = 1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.INCREASECLK;
            }
          }

      state.BRANCHMOD:
        rb = 4b1110;
        we = 0;
        if (rd2 == 16b0) {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.INCREASECLK;
                }
              }
        } else {
          if (slowClockEdge.out) {
            if (clkHold == 0) {
                state.d = state.CLKHOLD;
                }
              }
        }

      // Increase the slow clk by setting stu to 1
      state.INCREASECLK:
        stu = b1;
        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.CLKHOLD;
            }
          }

      // Wait in this state until hold signal is 1
      state.CLKHOLD:
        if (hold) {
          if (cycleCounter <= 10) {
            if (slowClockEdge.out) {
              if (clkHold == 0) {
                  state.d = state.INCREASECOUNT;
                  }
                }
          }
          else if (cycleCounter <= 30) {
            if (slowClockEdge1.out) {
              if (clkHold == 0) {
                  state.d = state.INCREASECOUNT;
                  }
                }
          }
          else if (cycleCounter <= 70) {
            if (slowClockEdge2.out) {
              if (clkHold == 0) {
                  state.d = state.INCREASECOUNT;
                  }
                }
          }
          else if (cycleCounter <= 150 ) {
            if (slowClockEdge3.out) {
              if (clkHold == 0) {
                  state.d = state.INCREASECOUNT;
                  }
                }
          }
          else if (cycleCounter > 150) {
            if (slowClockEdge4.out) {
              if (clkHold == 0) {
                  state.d = state.INCREASECOUNT;
                  }
                }
          }

        }

      // Finish game
      state.END:

        if (slowClockEdge.out) {
          if (clkHold == 0) {
            state.d = state.IDLE;
            }
          }
  }
}