/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu__1 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] q
  );
  
  
  
  wire [16-1:0] M_adder_q;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [1-1:0] M_adder_alufn0;
  alu_adder_9 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn0(M_adder_alufn0),
    .q(M_adder_q),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_shifter_q;
  reg [2-1:0] M_shifter_alufn;
  reg [16-1:0] M_shifter_a;
  reg [16-1:0] M_shifter_b;
  alu_shifter_10 shifter (
    .alufn(M_shifter_alufn),
    .a(M_shifter_a),
    .b(M_shifter_b),
    .q(M_shifter_q)
  );
  
  wire [16-1:0] M_bool_q;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn;
  alu_bool_11 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .q(M_bool_q)
  );
  
  wire [16-1:0] M_cmp_q;
  reg [1-1:0] M_cmp_alufn2;
  reg [1-1:0] M_cmp_alufn1;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  alu_cmp_12 cmp (
    .alufn2(M_cmp_alufn2),
    .alufn1(M_cmp_alufn1),
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .q(M_cmp_q)
  );
  
  wire [16-1:0] M_mul_q;
  reg [16-1:0] M_mul_a;
  reg [16-1:0] M_mul_b;
  alu_mul_13 mul (
    .a(M_mul_a),
    .b(M_mul_b),
    .q(M_mul_q)
  );
  
  wire [16-1:0] M_mod_q;
  reg [16-1:0] M_mod_a;
  reg [16-1:0] M_mod_b;
  alu_mod_14 mod (
    .a(M_mod_a),
    .b(M_mod_b),
    .q(M_mod_q)
  );
  
  wire [16-1:0] M_shiftadd_q;
  reg [16-1:0] M_shiftadd_a;
  reg [16-1:0] M_shiftadd_b;
  reg [2-1:0] M_shiftadd_alufn;
  alu_shift_add_15 shiftadd (
    .a(M_shiftadd_a),
    .b(M_shiftadd_b),
    .alufn(M_shiftadd_alufn),
    .q(M_shiftadd_q)
  );
  
  reg z;
  
  reg v;
  
  reg n;
  
  always @* begin
    M_adder_alufn0 = alufn[0+0-:1];
    M_adder_a = a;
    M_adder_b = b;
    z = M_adder_z;
    v = M_adder_v;
    n = M_adder_n;
    M_shifter_a = a;
    M_shifter_b = b;
    M_shifter_alufn = alufn[0+1-:2];
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn;
    M_cmp_z = z;
    M_cmp_v = v;
    M_cmp_n = n;
    M_cmp_alufn2 = alufn[2+0-:1];
    M_cmp_alufn1 = alufn[1+0-:1];
    M_mul_a = a;
    M_mul_b = b;
    M_mod_a = a;
    M_mod_b = b;
    M_shiftadd_a = a;
    M_shiftadd_b = b;
    M_shiftadd_alufn = alufn[0+1-:2];
    
    case (alufn[0+5-:6])
      6'h00: begin
        q = M_adder_q;
      end
      6'h01: begin
        q = M_adder_q;
      end
      6'h20: begin
        q = M_shifter_q;
      end
      6'h21: begin
        q = M_shifter_q;
      end
      6'h23: begin
        q = M_shifter_q;
      end
      6'h18: begin
        q = M_bool_q;
      end
      6'h1e: begin
        q = M_bool_q;
      end
      6'h16: begin
        q = M_bool_q;
      end
      6'h1a: begin
        q = M_bool_q;
      end
      6'h1c: begin
        q = M_bool_q;
      end
      6'h33: begin
        q = M_cmp_q;
      end
      6'h35: begin
        q = M_cmp_q;
      end
      6'h37: begin
        q = M_cmp_q;
      end
      6'h22: begin
        q = M_mul_q;
      end
      6'h3f: begin
        q = M_mod_q;
      end
      6'h38: begin
        q = M_shiftadd_q;
      end
      6'h39: begin
        q = M_shiftadd_q;
      end
      6'h3a: begin
        q = M_shiftadd_q;
      end
      6'h3b: begin
        q = M_shiftadd_q;
      end
      default: begin
        q = 1'h0;
      end
    endcase
  end
endmodule
