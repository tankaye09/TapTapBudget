/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_mul_13 (
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] q
  );
  
  
  
  wire [(4'hf+0)*16-1:0] M_adder_q;
  wire [(4'hf+0)-1:0] M_adder_z;
  wire [(4'hf+0)-1:0] M_adder_v;
  wire [(4'hf+0)-1:0] M_adder_n;
  reg [(4'hf+0)*16-1:0] M_adder_a;
  reg [(4'hf+0)*16-1:0] M_adder_b;
  reg [(4'hf+0)-1:0] M_adder_alufn0;
  
  genvar GEN_adder0;
  generate
  for (GEN_adder0=0;GEN_adder0<4'hf;GEN_adder0=GEN_adder0+1) begin: adder_gen_0
    alu_adder_9 adder (
      .a(M_adder_a[GEN_adder0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_adder_b[GEN_adder0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .alufn0(M_adder_alufn0[GEN_adder0*(1)+(1)-1-:(1)]),
      .q(M_adder_q[GEN_adder0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .z(M_adder_z[GEN_adder0*(1)+(1)-1-:(1)]),
      .v(M_adder_v[GEN_adder0*(1)+(1)-1-:(1)]),
      .n(M_adder_n[GEN_adder0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  
  wire [(4'hf+0)*16-1:0] M_shifter_q;
  reg [(4'hf+0)*2-1:0] M_shifter_alufn;
  reg [(4'hf+0)*16-1:0] M_shifter_a;
  reg [(4'hf+0)*16-1:0] M_shifter_b;
  
  genvar GEN_shifter0;
  generate
  for (GEN_shifter0=0;GEN_shifter0<4'hf;GEN_shifter0=GEN_shifter0+1) begin: shifter_gen_0
    alu_shifter_10 shifter (
      .alufn(M_shifter_alufn[GEN_shifter0*(2'h2)+(2'h2)-1-:(2'h2)]),
      .a(M_shifter_a[GEN_shifter0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_shifter_b[GEN_shifter0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .q(M_shifter_q[GEN_shifter0*(5'h10)+(5'h10)-1-:(5'h10)])
    );
  end
  endgenerate
  
  reg [15:0] s0;
  
  reg [15:0] s1;
  
  reg [15:0] s2;
  
  reg [15:0] s3;
  
  reg [15:0] s4;
  
  reg [15:0] s5;
  
  reg [15:0] s6;
  
  reg [15:0] s7;
  
  reg [15:0] s8;
  
  reg [15:0] s9;
  
  reg [15:0] s10;
  
  reg [15:0] s11;
  
  reg [15:0] s12;
  
  reg [15:0] s13;
  
  reg [15:0] s14;
  
  reg [15:0] s15;
  
  always @* begin
    q = 1'h0;
    s0[0+15-:16] = ({5'h10{a[0+0-:1]}}) & (b[0+15-:16]);
    M_shifter_a[0+15-:16] = ({5'h10{a[1+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[0+15-:16] = 1'h1;
    M_shifter_alufn[0+1-:2] = 3'h0;
    s1[0+15-:16] = M_shifter_q[0+15-:16];
    M_shifter_a[16+15-:16] = ({5'h10{a[2+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[16+15-:16] = 2'h2;
    M_shifter_alufn[2+1-:2] = 3'h0;
    s2[0+15-:16] = M_shifter_q[16+15-:16];
    M_shifter_a[32+15-:16] = ({5'h10{a[3+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[32+15-:16] = 2'h3;
    M_shifter_alufn[4+1-:2] = 3'h0;
    s3[0+15-:16] = M_shifter_q[32+15-:16];
    M_shifter_a[48+15-:16] = ({5'h10{a[4+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[48+15-:16] = 3'h4;
    M_shifter_alufn[6+1-:2] = 3'h0;
    s4[0+15-:16] = M_shifter_q[48+15-:16];
    M_shifter_a[64+15-:16] = ({5'h10{a[5+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[64+15-:16] = 3'h5;
    M_shifter_alufn[8+1-:2] = 3'h0;
    s5[0+15-:16] = M_shifter_q[64+15-:16];
    M_shifter_a[80+15-:16] = ({5'h10{a[6+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[80+15-:16] = 3'h6;
    M_shifter_alufn[10+1-:2] = 3'h0;
    s6[0+15-:16] = M_shifter_q[80+15-:16];
    M_shifter_a[96+15-:16] = ({5'h10{a[7+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[96+15-:16] = 3'h7;
    M_shifter_alufn[12+1-:2] = 3'h0;
    s7[0+15-:16] = M_shifter_q[96+15-:16];
    M_shifter_a[112+15-:16] = ({5'h10{a[8+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[112+15-:16] = 4'h8;
    M_shifter_alufn[14+1-:2] = 3'h0;
    s8[0+15-:16] = M_shifter_q[112+15-:16];
    M_shifter_a[128+15-:16] = ({5'h10{a[9+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[128+15-:16] = 4'h9;
    M_shifter_alufn[16+1-:2] = 3'h0;
    s9[0+15-:16] = M_shifter_q[128+15-:16];
    M_shifter_a[144+15-:16] = ({5'h10{a[10+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[144+15-:16] = 4'ha;
    M_shifter_alufn[18+1-:2] = 3'h0;
    s10[0+15-:16] = M_shifter_q[144+15-:16];
    M_shifter_a[160+15-:16] = ({5'h10{a[11+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[160+15-:16] = 4'hb;
    M_shifter_alufn[20+1-:2] = 3'h0;
    s11[0+15-:16] = M_shifter_q[160+15-:16];
    M_shifter_a[176+15-:16] = ({5'h10{a[12+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[176+15-:16] = 4'hc;
    M_shifter_alufn[22+1-:2] = 3'h0;
    s12[0+15-:16] = M_shifter_q[176+15-:16];
    M_shifter_a[192+15-:16] = ({5'h10{a[13+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[192+15-:16] = 4'hd;
    M_shifter_alufn[24+1-:2] = 3'h0;
    s13[0+15-:16] = M_shifter_q[192+15-:16];
    M_shifter_a[208+15-:16] = ({5'h10{a[14+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[208+15-:16] = 4'he;
    M_shifter_alufn[26+1-:2] = 3'h0;
    s14[0+15-:16] = M_shifter_q[208+15-:16];
    M_shifter_a[224+15-:16] = ({5'h10{a[15+0-:1]}}) & (b[0+15-:16]);
    M_shifter_b[224+15-:16] = 4'hf;
    M_shifter_alufn[28+1-:2] = 3'h0;
    s15[0+15-:16] = M_shifter_q[224+15-:16];
    M_adder_alufn0 = 1'h0;
    M_adder_a[0+15-:16] = s0;
    M_adder_b[0+15-:16] = s1;
    M_adder_a[16+15-:16] = s2;
    M_adder_b[16+15-:16] = s3;
    M_adder_a[32+15-:16] = s4;
    M_adder_b[32+15-:16] = s5;
    M_adder_a[48+15-:16] = s6;
    M_adder_b[48+15-:16] = s7;
    M_adder_a[64+15-:16] = s8;
    M_adder_b[64+15-:16] = s9;
    M_adder_a[80+15-:16] = s10;
    M_adder_b[80+15-:16] = s11;
    M_adder_a[96+15-:16] = s12;
    M_adder_b[96+15-:16] = s13;
    M_adder_a[112+15-:16] = s14;
    M_adder_b[112+15-:16] = s15;
    M_adder_a[128+15-:16] = M_adder_q[0+15-:16];
    M_adder_b[128+15-:16] = M_adder_q[16+15-:16];
    M_adder_a[144+15-:16] = M_adder_q[32+15-:16];
    M_adder_b[144+15-:16] = M_adder_q[48+15-:16];
    M_adder_a[160+15-:16] = M_adder_q[64+15-:16];
    M_adder_b[160+15-:16] = M_adder_q[80+15-:16];
    M_adder_a[176+15-:16] = M_adder_q[96+15-:16];
    M_adder_b[176+15-:16] = M_adder_q[112+15-:16];
    M_adder_a[192+15-:16] = M_adder_q[128+15-:16];
    M_adder_b[192+15-:16] = M_adder_q[144+15-:16];
    M_adder_a[208+15-:16] = M_adder_q[160+15-:16];
    M_adder_b[208+15-:16] = M_adder_q[176+15-:16];
    M_adder_a[224+15-:16] = M_adder_q[192+15-:16];
    M_adder_b[224+15-:16] = M_adder_q[208+15-:16];
    q = M_adder_q[224+15-:16];
  end
endmodule
