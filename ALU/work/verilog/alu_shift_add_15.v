/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_shift_add_15 (
    input [15:0] a,
    input [15:0] b,
    input [1:0] alufn,
    output reg [15:0] q
  );
  
  
  
  wire [16-1:0] M_adder_q;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_a;
  reg [16-1:0] M_adder_b;
  reg [1-1:0] M_adder_alufn0;
  alu_adder_9 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn0(M_adder_alufn0),
    .q(M_adder_q),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [(2'h3+0)*16-1:0] M_shifter_q;
  reg [(2'h3+0)*2-1:0] M_shifter_alufn;
  reg [(2'h3+0)*16-1:0] M_shifter_a;
  reg [(2'h3+0)*16-1:0] M_shifter_b;
  
  genvar GEN_shifter0;
  generate
  for (GEN_shifter0=0;GEN_shifter0<2'h3;GEN_shifter0=GEN_shifter0+1) begin: shifter_gen_0
    alu_shifter_10 shifter (
      .alufn(M_shifter_alufn[GEN_shifter0*(2'h2)+(2'h2)-1-:(2'h2)]),
      .a(M_shifter_a[GEN_shifter0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .b(M_shifter_b[GEN_shifter0*(5'h10)+(5'h10)-1-:(5'h10)]),
      .q(M_shifter_q[GEN_shifter0*(5'h10)+(5'h10)-1-:(5'h10)])
    );
  end
  endgenerate
  
  reg [15:0] r;
  
  reg [15:0] s;
  
  reg [15:0] t;
  
  always @* begin
    M_shifter_a[0+15-:16] = a;
    M_shifter_b[0+15-:16] = 2'h2;
    M_shifter_alufn[0+1-:2] = 2'h0;
    r = M_shifter_q[0+15-:16];
    M_shifter_a[16+15-:16] = r;
    M_shifter_b[16+15-:16] = 4'he;
    M_shifter_alufn[2+1-:2] = 2'h1;
    s = M_shifter_q[16+15-:16];
    
    case (alufn[0+1-:2])
      2'h0: begin
        t = s;
      end
      2'h1: begin
        M_shifter_a[32+15-:16] = s;
        M_shifter_b[32+15-:16] = 2'h2;
        M_shifter_alufn[4+1-:2] = 2'h0;
        t = M_shifter_q[32+15-:16];
      end
      2'h2: begin
        M_shifter_a[32+15-:16] = s;
        M_shifter_b[32+15-:16] = 3'h4;
        M_shifter_alufn[4+1-:2] = 2'h0;
        t = M_shifter_q[32+15-:16];
      end
      2'h3: begin
        M_shifter_a[32+15-:16] = s;
        M_shifter_b[32+15-:16] = 3'h6;
        M_shifter_alufn[4+1-:2] = 2'h0;
        t = M_shifter_q[32+15-:16];
      end
      default: begin
        t = s;
      end
    endcase
    M_adder_a = t;
    M_adder_b = b;
    M_adder_alufn0 = 1'h0;
    q = M_adder_q;
  end
endmodule
