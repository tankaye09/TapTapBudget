/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input reset_btn,
    input next_button,
    input move_left,
    input move_right,
    input change_colour,
    output reg [7:0] io_basket,
    output reg [7:0] io_seven_seg,
    output reg [47:0] io_col,
    output reg [2:0] io_life,
    output reg [2:0] io_combo
  );
  
  
  
  reg rst;
  
  reg [2:0] randNum;
  
  reg randColour;
  
  wire [16-1:0] M_score_to_4_digits_digits;
  reg [16-1:0] M_score_to_4_digits_score;
  score_to_4_digits_1 score_to_4_digits (
    .score(M_score_to_4_digits_score),
    .digits(M_score_to_4_digits_digits)
  );
  
  wire [(2'h2+0)*3-1:0] M_bin_to_led_threebit;
  reg [(2'h2+0)*2-1:0] M_bin_to_led_deci;
  
  genvar GEN_bin_to_led0;
  generate
  for (GEN_bin_to_led0=0;GEN_bin_to_led0<2'h2;GEN_bin_to_led0=GEN_bin_to_led0+1) begin: bin_to_led_gen_0
    bin_to_led_2 bin_to_led (
      .deci(M_bin_to_led_deci[GEN_bin_to_led0*(2'h2)+(2'h2)-1-:(2'h2)]),
      .threebit(M_bin_to_led_threebit[GEN_bin_to_led0*(2'h3)+(2'h3)-1-:(2'h3)])
    );
  end
  endgenerate
  
  wire [16-1:0] M_alu_q;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu__3 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .q(M_alu_q)
  );
  
  wire [8-1:0] M_basket_fsm_q;
  wire [3-1:0] M_basket_fsm_state;
  reg [1-1:0] M_basket_fsm_l;
  reg [1-1:0] M_basket_fsm_r;
  reg [1-1:0] M_basket_fsm_c;
  basket_fsm_4 basket_fsm (
    .clk(clk),
    .rst(rst),
    .l(M_basket_fsm_l),
    .r(M_basket_fsm_r),
    .c(M_basket_fsm_c),
    .q(M_basket_fsm_q),
    .state(M_basket_fsm_state)
  );
  wire [16-1:0] M_regfile_read_data_1;
  wire [16-1:0] M_regfile_read_data_2;
  wire [16-1:0] M_regfile_life_data;
  wire [16-1:0] M_regfile_combo_data;
  wire [16-1:0] M_regfile_score_data;
  wire [16-1:0] M_regfile_clock_speed_data;
  wire [16-1:0] M_regfile_col_1;
  wire [16-1:0] M_regfile_col_2;
  wire [16-1:0] M_regfile_col_3;
  wire [16-1:0] M_regfile_col_4;
  wire [16-1:0] M_regfile_lastrow;
  reg [16-1:0] M_regfile_read_address_1;
  reg [16-1:0] M_regfile_read_address_2;
  reg [16-1:0] M_regfile_write_address;
  reg [16-1:0] M_regfile_write_data;
  reg [1-1:0] M_regfile_write_enable;
  regfile_5 regfile (
    .clk(clk),
    .rst(rst),
    .read_address_1(M_regfile_read_address_1),
    .read_address_2(M_regfile_read_address_2),
    .write_address(M_regfile_write_address),
    .write_data(M_regfile_write_data),
    .write_enable(M_regfile_write_enable),
    .read_data_1(M_regfile_read_data_1),
    .read_data_2(M_regfile_read_data_2),
    .life_data(M_regfile_life_data),
    .combo_data(M_regfile_combo_data),
    .score_data(M_regfile_score_data),
    .clock_speed_data(M_regfile_clock_speed_data),
    .col_1(M_regfile_col_1),
    .col_2(M_regfile_col_2),
    .col_3(M_regfile_col_3),
    .col_4(M_regfile_col_4),
    .lastrow(M_regfile_lastrow)
  );
  wire [2-1:0] M_main_fsm_asel;
  wire [3-1:0] M_main_fsm_bsel;
  wire [6-1:0] M_main_fsm_alufn;
  wire [1-1:0] M_main_fsm_stu;
  wire [1-1:0] M_main_fsm_we;
  wire [4-1:0] M_main_fsm_ra;
  wire [4-1:0] M_main_fsm_rb;
  wire [4-1:0] M_main_fsm_rc;
  wire [6-1:0] M_main_fsm_state_index;
  reg [16-1:0] M_main_fsm_rd2;
  reg [1-1:0] M_main_fsm_next;
  main_fsm_6 main_fsm (
    .clk(clk),
    .rst(rst),
    .rd2(M_main_fsm_rd2),
    .next(M_main_fsm_next),
    .asel(M_main_fsm_asel),
    .bsel(M_main_fsm_bsel),
    .alufn(M_main_fsm_alufn),
    .stu(M_main_fsm_stu),
    .we(M_main_fsm_we),
    .ra(M_main_fsm_ra),
    .rb(M_main_fsm_rb),
    .rc(M_main_fsm_rc),
    .state_index(M_main_fsm_state_index)
  );
  wire [1-1:0] M_random_out;
  wire [16-1:0] M_random_debug;
  rand_gen_7 random (
    .clk(clk),
    .rst(rst),
    .out(M_random_out),
    .debug(M_random_debug)
  );
  wire [1-1:0] M_random2_out;
  wire [16-1:0] M_random2_debug;
  rand_gen2_8 random2 (
    .clk(clk),
    .rst(rst),
    .out(M_random2_out),
    .debug(M_random2_debug)
  );
  wire [8-1:0] M_seg7_seg;
  wire [4-1:0] M_seg7_sel;
  reg [16-1:0] M_seg7_values;
  multi_seven_seg_9 seg7 (
    .clk(clk),
    .rst(rst),
    .values(M_seg7_values),
    .seg(M_seg7_seg),
    .sel(M_seg7_sel)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_10 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_reset_buttoncond_out;
  reg [1-1:0] M_reset_buttoncond_in;
  button_conditioner_11 reset_buttoncond (
    .clk(clk),
    .in(M_reset_buttoncond_in),
    .out(M_reset_buttoncond_out)
  );
  wire [1-1:0] M_reset_buttondetector_out;
  reg [1-1:0] M_reset_buttondetector_in;
  edge_detector_12 reset_buttondetector (
    .clk(clk),
    .in(M_reset_buttondetector_in),
    .out(M_reset_buttondetector_out)
  );
  wire [1-1:0] M_left_buttoncond_out;
  reg [1-1:0] M_left_buttoncond_in;
  button_conditioner_11 left_buttoncond (
    .clk(clk),
    .in(M_left_buttoncond_in),
    .out(M_left_buttoncond_out)
  );
  wire [1-1:0] M_left_buttondetector_out;
  reg [1-1:0] M_left_buttondetector_in;
  edge_detector_12 left_buttondetector (
    .clk(clk),
    .in(M_left_buttondetector_in),
    .out(M_left_buttondetector_out)
  );
  wire [1-1:0] M_right_buttoncond_out;
  reg [1-1:0] M_right_buttoncond_in;
  button_conditioner_11 right_buttoncond (
    .clk(clk),
    .in(M_right_buttoncond_in),
    .out(M_right_buttoncond_out)
  );
  wire [1-1:0] M_right_buttondetector_out;
  reg [1-1:0] M_right_buttondetector_in;
  edge_detector_12 right_buttondetector (
    .clk(clk),
    .in(M_right_buttondetector_in),
    .out(M_right_buttondetector_out)
  );
  wire [1-1:0] M_colour_buttoncond_out;
  reg [1-1:0] M_colour_buttoncond_in;
  button_conditioner_11 colour_buttoncond (
    .clk(clk),
    .in(M_colour_buttoncond_in),
    .out(M_colour_buttoncond_out)
  );
  wire [1-1:0] M_colour_buttondetector_out;
  reg [1-1:0] M_colour_buttondetector_in;
  edge_detector_12 colour_buttondetector (
    .clk(clk),
    .in(M_colour_buttondetector_in),
    .out(M_colour_buttondetector_out)
  );
  wire [1-1:0] M_next_buttoncond_out;
  reg [1-1:0] M_next_buttoncond_in;
  button_conditioner_11 next_buttoncond (
    .clk(clk),
    .in(M_next_buttoncond_in),
    .out(M_next_buttoncond_out)
  );
  wire [1-1:0] M_next_buttondetector_out;
  reg [1-1:0] M_next_buttondetector_in;
  edge_detector_12 next_buttondetector (
    .clk(clk),
    .in(M_next_buttondetector_in),
    .out(M_next_buttondetector_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_reset_buttoncond_in = reset_btn;
    M_reset_buttondetector_in = M_reset_buttoncond_out;
    M_reset_cond_in = M_reset_buttondetector_out;
    M_bin_to_led_deci[0+1-:2] = M_regfile_combo_data[0+1-:2];
    io_combo = M_bin_to_led_threebit[0+2-:3];
    M_bin_to_led_deci[2+1-:2] = M_regfile_life_data[0+1-:2];
    io_life = M_bin_to_led_threebit[3+2-:3];
    randNum = M_random_debug[0+2-:3];
    randColour = M_random2_debug[0+0-:1];
    M_score_to_4_digits_score = M_regfile_score_data;
    M_seg7_values = M_score_to_4_digits_digits;
    io_sel = M_seg7_sel;
    io_seven_seg[0+7-:8] = M_seg7_seg;
    M_left_buttoncond_in = move_left;
    M_left_buttondetector_in = M_left_buttoncond_out;
    M_right_buttoncond_in = move_right;
    M_right_buttondetector_in = M_right_buttoncond_out;
    M_colour_buttoncond_in = change_colour;
    M_colour_buttondetector_in = M_colour_buttoncond_out;
    M_basket_fsm_l = M_left_buttondetector_out;
    M_basket_fsm_r = M_right_buttondetector_out;
    M_basket_fsm_c = M_colour_buttondetector_out;
    io_basket = M_basket_fsm_q;
    io_col[0+11-:12] = M_regfile_col_1[0+11-:12];
    io_col[12+11-:12] = M_regfile_col_2[0+11-:12];
    io_col[24+11-:12] = M_regfile_col_3[0+11-:12];
    io_col[36+11-:12] = M_regfile_col_4[0+11-:12];
    M_main_fsm_rd2 = M_regfile_read_data_2;
    M_next_buttoncond_in = next_button;
    M_next_buttondetector_in = M_next_buttoncond_out;
    M_main_fsm_next = M_next_buttondetector_out;
    M_regfile_read_address_1 = M_main_fsm_ra;
    M_regfile_read_address_2 = M_main_fsm_rb;
    M_regfile_write_address = M_main_fsm_rc;
    M_regfile_write_enable = M_main_fsm_we;
    M_regfile_write_data = M_alu_q;
    M_alu_a = M_regfile_read_data_1;
    M_alu_b = M_regfile_read_data_2;
    M_alu_alufn = M_main_fsm_alufn;
    
    case (M_main_fsm_asel)
      2'h0: begin
        M_alu_a = M_regfile_read_data_1;
      end
      2'h1: begin
        M_alu_a = 16'h0001;
      end
      2'h2: begin
        M_alu_a = 16'h0000;
      end
      2'h3: begin
        M_alu_a = randColour;
      end
      default: begin
        M_alu_a = M_regfile_read_data_1;
      end
    endcase
    
    case (M_main_fsm_bsel)
      3'h0: begin
        M_alu_b = M_regfile_read_data_2;
      end
      3'h1: begin
        M_alu_b = 2'h1;
      end
      3'h2: begin
        M_alu_b = 2'h2;
      end
      3'h3: begin
        M_alu_b = 2'h3;
      end
      3'h4: begin
        M_alu_b = 1'h0;
      end
      3'h5: begin
        M_alu_b = M_basket_fsm_q;
      end
      3'h6: begin
        M_alu_b = randNum;
      end
      3'h7: begin
        M_alu_b = 5'h14;
      end
      default: begin
        M_alu_b = M_regfile_read_data_2;
      end
    endcase
  end
endmodule
